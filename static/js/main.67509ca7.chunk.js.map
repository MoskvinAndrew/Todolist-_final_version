{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","actions","authReducer","reducer","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","t","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","tl","todolistsReducer","fetchTasksTC","createAsyncThunk","thunkAPI","then","res","tasks","items","removeTaskAC","indexOfTask","addTaskAC","task","todoListId","updateTaskAC","extraReducers","builder","addCase","forEach","fulfilled","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","finally","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67509ca7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a4ccc59a-b0d7-4cb8-b389-cc3b34f67e84'\r\n\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? {error:error.message} : {error:'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({name:'auth',initialState:initialState,reducers:{\r\n        setIsLoggedInAC(state,action:PayloadAction<{isLoggedIn:boolean}>){\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }})\r\nexport const { setIsLoggedInAC } = slice.actions      //даем доступ к экшенам\r\n\r\nexport const authReducer = slice.reducer              //старое название оставляем чтобы новый редюсер работал\r\n\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({isLoggedIn:true}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({isLoggedIn:false}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState:InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({name:'app',initialState:initialState,reducers:{\r\n        setAppErrorAC(state,action:PayloadAction<{error: string | null}>){\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state,action:PayloadAction<{status:RequestStatusType}>){\r\n            state.status = action.payload.status\r\n        },\r\n        setAppInitializedAC(state,action:PayloadAction<{isInitialized:boolean}>){\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n\r\n    }})\r\nexport const {setAppErrorAC,setAppStatusAC,setAppInitializedAC} = slice.actions\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\n// thunk`s\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.me()\r\n        .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n\r\n            dispatch(setIsLoggedInAC({isLoggedIn:true}));\r\n        } else {\r\n\r\n        }\r\n\r\n        dispatch(setAppInitializedAC({isInitialized:true}));\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType, setAppErrorAC} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({name:\"todolist\",initialState:initialState,reducers:{\r\n        removeTodolistAC:(state,action:PayloadAction<{id: string}>)=>{\r\n            let index = state.findIndex(t => t.id === action.payload.id)\r\n            if(index > -1) {\r\n                state.splice(index, 1)\r\n            }},\r\n        addTodolistAC:(state,action:PayloadAction<{todolist: TodolistType}>)=>{\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n},\r\n        changeTodolistTitleAC:(state,action:PayloadAction<{id: string, title: string}>)=>{\r\n            let index = state.findIndex(t => t.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC:(state,action:PayloadAction<{id: string, filter: FilterValuesType}>)=>{\r\n            let index = state.findIndex(t => t.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC:(state,action:PayloadAction<{id: string, status: RequestStatusType}>)=>{\r\n            let index = state.findIndex(t => t.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC:(state,action:PayloadAction<{todolists: Array<TodolistType>}>)=>{\r\n            return  action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }})\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {removeTodolistAC,addTodolistAC,changeTodolistTitleAC,changeTodolistFilterAC,changeTodolistEntityStatusAC,\r\n    setTodolistsAC} = slice.actions\r\n\r\n\r\n// export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n//     switch (action.type) {\r\n//         case 'REMOVE-TODOLIST':\r\n//             return state.filter(tl => tl.id != action.id)\r\n//         case 'ADD-TODOLIST':\r\n//             return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n//\r\n//         case 'CHANGE-TODOLIST-TITLE':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n//         case 'CHANGE-TODOLIST-FILTER':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n//         case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n//         case 'SET-TODOLISTS':\r\n//             return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// // actions\r\n// export const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\n// export const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\n// export const changeTodolistTitleAC = (id: string, title: string) => ({\r\n//     type: 'CHANGE-TODOLIST-TITLE',\r\n//     id,\r\n//     title\r\n// } as const)\r\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n//     type: 'CHANGE-TODOLIST-FILTER',\r\n//     id,\r\n//     filter\r\n// } as const)\r\n// export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n//     type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\n// export const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch:Dispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists:res.data}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch:Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id:todolistId,status:'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id:todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch:Dispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist:res.data.data.item}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n            .catch(error=>{\r\n                console.log(error.message)\r\n               dispatch(setAppErrorAC({error:'some error'}))\r\n            })\r\n            .finally(()=> {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch & typeof changeTodolistTitleAC) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id:id,title:title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n// type ActionsType =\r\n//     | RemoveTodolistActionType\r\n//     | AddTodolistActionType\r\n//     | ReturnType<typeof changeTodolistTitleAC>\r\n//     | ReturnType<typeof changeTodolistFilterAC>\r\n//     | SetTodolistsActionType\r\n//     | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType>\r\n","import {\r\n    setTodolistsAC,\r\n    addTodolistAC,\r\n    removeTodolistAC\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasksTC',(todolistId: string,thunkAPI)=>  {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n   return  todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n             // thunkAPI.dispatch(setTasksAC({tasks: tasks, todolistId: todolistId}))\r\n             thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {tasks: tasks, todolistId: todolistId}\r\n        })\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: \"tasks\", initialState: initialState, reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n            let todolist = state[action.payload.todolistId]\r\n            let indexOfTask = todolist.findIndex(t => t.id === action.payload.taskId)\r\n            if (indexOfTask > -1) {\r\n                todolist.splice(indexOfTask, 1)\r\n            }\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<{ task: TaskType }>) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            let todolist = state[action.payload.todolistId]\r\n            let indexOfTask = todolist.findIndex(t => t.id === action.payload.taskId)\r\n            if (indexOfTask > -1) {\r\n                todolist[indexOfTask] = {...todolist[indexOfTask], ...action.payload.model}\r\n            }\r\n        },\r\n\r\n    }, extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id];\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => state[tl.id] = [])\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled,(state, action)=>{\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC} = slice.actions\r\n\r\n\r\n// thunks\r\n// export const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}))\r\n//     todolistsAPI.getTasks(todolistId)\r\n//         .then((res) => {\r\n//             const tasks = res.data.items\r\n//             dispatch(setTasksAC({tasks: tasks, todolistId: todolistId}))\r\n//             dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//         })\r\n// }\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({todolistId: todolistId, taskId: taskId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task: task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId: taskId, todolistId: todolistId, model: domainModel})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({filter:value,id:todolistId})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error:null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            Todolists\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\n\r\nexport const store =  configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunkMiddleware)\r\n\r\n\r\n\r\n\r\n})\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}